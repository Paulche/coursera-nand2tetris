%{
#include "main.h"
#include "bison.h"
#include "Compiler.hpp"
%}


%token AT EQUAL PLUS
%token D_REGISTER M_REGISTER A_REGISTER
%token ONE ZERO MINUS NUMBER 
%token EOL
%token SEMICOLON EXCLAMATION_POINT AMPERSAND PIPE
%token JMP JLE JNE JLT JGE JEQ JGT 

%%

list: 
  | list exp EOL { data = 0; } 
  ;

exp: 
  | acode { write_w(); }
  | ccode { SET(15); SET(14); SET(13); write_w(); }
  ;

acode: AT address { data = $2; }
  ;

address: NUMBER
  | ZERO
  | ONE
  ;

ccode: dest EQUAL comp SEMICOLON jump
  | comp SEMICOLON jump
  | dest EQUAL comp
  ;

dest: M_REGISTER                          { SET(3); }
  | D_REGISTER                            { SET(4); }
  | M_REGISTER D_REGISTER                 { SET(3); SET(4); }
  | A_REGISTER                            { SET(5); }
  | A_REGISTER M_REGISTER                 { SET(5); SET(3); }
  | A_REGISTER D_REGISTER                 { SET(5); SET(4); }
  | A_REGISTER M_REGISTER D_REGISTER      { SET(5); SET(4); SET(3); }
  ;

comp: ZERO                              { SET(11); SET(9); SET(7); }
  | ONE                                 { SET(11); SET(10); SET(9); SET(8); SET(7); SET(6); }
  | MINUS ONE                           { SET(11); SET(10); SET(9); SET(7); }
  | D_REGISTER                          { SET(9); SET(8); }
  | a_or_m                              { SET(11); SET(10); }
  | EXCLAMATION_POINT D_REGISTER        { SET(9); SET(8); SET(6); }
  | EXCLAMATION_POINT a_or_m            { SET(11); SET(10); SET(6); }
  | MINUS D_REGISTER                    { SET(9); SET(8); SET(7); SET(6); }
  | MINUS a_or_m                        { SET(11); SET(10); SET(7); SET(6); }
  | D_REGISTER PLUS ONE                 { SET(10); SET(9); SET(8); SET(7); SET(6); }
  | a_or_m PLUS ONE                     { SET(11); SET(10); SET(8); SET(7); SET(6); }
  | D_REGISTER MINUS ONE                { SET(9); SET(8); SET(7); }
  | a_or_m MINUS ONE                    { SET(11); SET(10); SET(7); }
  | D_REGISTER PLUS a_or_m              { SET(7); }
  | D_REGISTER MINUS a_or_m             { SET(10); SET(7); SET(6); }
  | a_or_m MINUS D_REGISTER             { SET(8); SET(7); SET(6); }
  | D_REGISTER AMPERSAND a_or_m         
  | D_REGISTER PIPE a_or_m              { SET(10); SET(8); SET(6); }
  ;

a_or_m: A_REGISTER 
  | M_REGISTER      { SET(12); }
  ;

jump: JMP     { SET(0); SET(1); SET(2);  }
  | JGT       { SET(0); }
  | JEQ       { SET(1); }
  | JGE       { SET(0); SET(1); }
  | JLT       { SET(2); }
  | JNE       { SET(2); SET(0); }
  | JLE       { SET(2); SET(1); }
  ;
