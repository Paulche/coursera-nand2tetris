// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

 /*
  *  0x3FFF: 0011 1111 1111 1111          RAM
  *  ----------------------------------------
  *  0x4000: 0100 0000 0000 0000
  *  0x5FFF: 0101 1111 1111 1111          Screen
  *  ----------------------------------------
  *  0x6000: 0110 0000 0000 0000          Keyboard
  */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:

    RAM16K        (in=in,load=load-dmux-a,address=address[0..13],out=out-mux2-a);
    Screen        (in=in,load=load-dmux-b,address=address[0..12],out=out-mux1-a);
    Keyboard      (out=out-mux1-b);
    DMux          (in=load, a=load-dmux-a, b=load-dmux-b, sel=address[14]);
    Mux16         (a=out-mux1-a, b=out-mux1-b, out=out-mux2-b, sel=address[13]);
    Mux16         (a=out-mux2-a, b=out-mux2-b, out=out, sel=address[14]);
}
